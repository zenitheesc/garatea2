/*
  Stratolink
  Code to Drive NTX2B via PWM and write the I2C data on SD
  Written by Anthony Stirk M0UPU
  RTTY code from Rob Harrison Icarus Project
  Modeified by Francesco Lena for Zenith project - Garatea 2 Mission
  ukhas.org.uk
  zenith.eesc.usp.br
*/
#include <stdlib.h>
#define RADIOPIN 9
#include <SD.h>
#include <string.h>
#include <util/crc16.h>
#include <Wire.h>
#include <avr/wdt.h>
const int led = 12;
int contagem = 0;
const int chipSelect = 10;
File file;
char datastring[40];
void setup() {
  pinMode (led, OUTPUT);
  pinMode(RADIOPIN, OUTPUT);
  setPwmFrequency(RADIOPIN, 1);
  Wire.begin(8);
  Wire.onReceive(datenaFunc);
  // wdt_enable(WDTO_8S);
  Serial.begin(9600);
}

void loop() {
  for (int i = 0; i <= 39; i++) {
    datastring[i] = (char)0;
    contagem = 0;
  }
 
  File dataFile = SD.open("telemetria.txt", FILE_WRITE);
   if (dataFile) {
    dataFile.println (datastring);
    dataFile.close();
    Serial.println ("sd ok");
    digitalWrite(led, HIGH);
    delay (10);
    digitalWrite(led, LOW);
    delay (490);
   }else{ 
    digitalWrite(led, HIGH);
    delay (200);
    digitalWrite(led, LOW);
    delay (200);
  }
   operate();
}

void operate() {
  delay (10);
  //Serial.println(datastring);
  unsigned int CHECKSUM = gps_CRC16_checksum(datastring); // Calculates the checksum for this datastring
  char checksum_str[6];
  sprintf(checksum_str, "\n", CHECKSUM);
  strcat(datastring, checksum_str);
  Serial.print (checksum_str);
  
  if (datastring[1, 2] != 0){
    Serial.println(datastring);
    rtty_txstring (datastring);
    File dataFile = SD.open("telemetria.txt", FILE_WRITE);
    if (dataFile) {
      rtty_txstring ("sd ok\n");
    }else{
      rtty_txstring ("sd fail\n");
    }
  }  
}

void datenaFunc(int howMany) {
  int aux = 0;
  while (Wire.available()) { 
    datastring[aux] = Wire.read();
    aux = aux + 1;
    contagem = 1;
  }
     
}

void rtty_txstring (char * string) {
  /* Simple function to sent a char at a time to
  ** rtty_txbyte function.
  ** NB Each char is one byte (8 Bits)
  */

  char c;
  c = *string++;

  while ( c != '\0') {
    rtty_txbyte (c);
    c = *string++;
  }
}
void rtty_txbyte (char c) {
  /* Simple function to sent each bit of a char to
  ** rtty_txbit function.
  ** NB The bits are sent Least Significant Bit first
  **
    // All chars should be preceded with a 0 and
    // proceed with a 1. 0 = Start bit; 1 = Stop bit
  **
  */

  int i;

  rtty_txbit (0);
  for (i = 0; i < 7; i++) { // Change this here 7 or 8 for ASCII-7 / ASCII-8
    if (c & 1) rtty_txbit(1);
    else rtty_txbit(0);

    c = c >> 1;
  }
  rtty_txbit (1); // Stop bit
  rtty_txbit (1); // Stop bit
}

void rtty_txbit (int bit) {
  if (bit) {
    analogWrite(RADIOPIN, 110);
  }
  else {
    analogWrite(RADIOPIN, 100);
  }

  //para 50 bd
  delayMicroseconds(10000);
  delayMicroseconds(10150);

  // para 100 bd
  // delayMicroseconds(10075);

  //para 300 bd 
  // delayMicroseconds(3370);

}

uint16_t gps_CRC16_checksum (char *string) {
  size_t i;
  uint16_t crc;
  uint8_t c;
  crc = 0xFFFF;

  for (i = 2; i < strlen(string); i++) {
    digitalWrite(led, HIGH);
    c = string[i];
    crc = _crc_xmodem_update (crc, c);
  }

  digitalWrite(led, LOW);
  return crc;
}

void setPwmFrequency(int pin, int divisor) { // com isso nao precisa usar divisor de tensao - nunca modificar
  byte mode;
  if (pin == 5 || pin == 6 || pin == 9 || pin == 10) {
    switch (divisor) {
      case 1:
        mode = 0x01;
        break;
      case 8:
        mode = 0x02;
        break;
      case 64:
        mode = 0x03;
        break;
      case 256:
        mode = 0x04;
        break;
      case 1024:
        mode = 0x05;
        break;
      default:
        return;
    }

    if (pin == 5 || pin == 6) {
      TCCR0B = TCCR0B & 0b11111000 | mode;
    }
    else {
      TCCR1B = TCCR1B & 0b11111000 | mode;
    }
  }
  else if (pin == 3 || pin == 11) {
    switch (divisor) {
      case 1:
        mode = 0x01;
        break;
      case 8:
        mode = 0x02;
        break;
      case 32:
        mode = 0x03;
        break;
      case 64:
        mode = 0x04;
        break;
      case 128:
        mode = 0x05;
        break;
      case 256:
        mode = 0x06;
        break;
      case 1024:
        mode = 0x7;
        break;
      default:
        return;
    }
    TCCR2B = TCCR2B & 0b11111000 | mode;
  }
}
